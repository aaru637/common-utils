package org.dk.exception;

import lombok.Getter;
import org.dk.annotations.EnumValidator;
import org.dk.annotations.constraints.EnumValidatorConstraint;

import java.io.Serial;

/**
 * Custom runtime exception thrown when an invalid enum value is encountered during validation.
 * <p>
 * This exception is specifically designed for enum validation scenarios where a string value
 * does not match any of the constants defined in a target enum class. It provides structured
 * error information including a custom response code and a list of allowed enum values to
 * facilitate better error handling and user feedback.
 * <p>
 * <strong>Key Features:</strong>
 * <ul>
 *   <li><strong>Response Code:</strong> Application-specific error code for programmatic handling</li>
 *   <li><strong>Allowed Values:</strong> Complete list of valid enum constants for user guidance</li>
 *   <li><strong>Runtime Exception:</strong> Unchecked exception that doesn't require explicit handling</li>
 *   <li><strong>Lombok Integration:</strong> Uses {@code @Getter} for automatic accessor method generation</li>
 * </ul>
 * <p>
 * <strong>Usage Context:</strong>
 * This exception is primarily thrown by the {@link EnumValidatorConstraint} during Bean Validation
 * processing when a field value fails to match any enum constant. It can also be used in other
 * enum validation scenarios throughout the application.
 * <p>
 * <strong>Error Handling Example:</strong>
 * <pre>{@code
 * try {
 *     validateUserStatus("INVALID_STATUS");
 * } catch (InvalidEnumException e) {
 *     logger.error("Validation failed with code: {}", e.getResponseCode());
 *     logger.error("Allowed values: {}", e.getAllowedValues());
 *
 *     // Return structured error response
 *     return ErrorResponse.builder()
 *         .code(e.getResponseCode())
 *         .message("Invalid enum value provided")
 *         .allowedValues(e.getAllowedValues())
 *         .build();
 * }
 * }</pre>
 * <p>
 * <strong>Integration with Bean Validation:</strong>
 * When used with {@link EnumValidator}, this exception bypasses the standard Bean Validation
 * mechanism by throwing an exception instead of returning a validation result. This provides
 * immediate error feedback with structured error information.
 *
 * @author Dhineshkumar Dhandapani
 * @version 1.0
 * @see EnumValidatorConstraint
 * @see EnumValidator
 * @see RuntimeException
 * @since 1.0
 * <p>Created at : 2025-09-17</p>
 */
@Getter
public class InvalidEnumException extends RuntimeException {
    /**
     * Serial version UID for serialization compatibility
     */
    @Serial
    private static final long serialVersionUID = 1L;

    /**
     * Application-specific error code for programmatic error identification and handling.
     * <p>
     * This code can be used by client applications to:
     * <ul>
     *   <li>Implement specific error handling logic</li>
     *   <li>Generate localized error messages</li>
     *   <li>Create structured API error responses</li>
     *   <li>Support error tracking and monitoring systems</li>
     * </ul>
     */
    private final String responseCode;
    /**
     * Comma-separated string containing all valid enum constant names.
     * <p>
     * This field provides users with immediate feedback about acceptable values,
     * enabling them to correct their input without additional documentation lookup.
     * The format is typically: "VALUE1, VALUE2, VALUE3" (created by {@code TypeConverter.arrayToString()}).
     */
    private final String allowedValues;

    /**
     * Constructs a new InvalidEnumException with the specified response code and allowed values.
     * <p>
     * <strong>Message Format:</strong>
     * The exception message is automatically generated in the format:
     * {@code "Invalid enum value: " + responseCode}
     * <p>
     * <strong>Note:</strong> The current message format may be misleading as it displays the response
     * code rather than the actual invalid value that caused the exception. Consider using the actual
     * invalid value in the message for better clarity.
     * <p>
     * <strong>Usage Example:</strong>
     * <pre>{@code
     * // When "INVALID_STATUS" doesn't match UserStatus enum constants
     * throw new InvalidEnumException(
     *     "USER_STATUS_ERR",
     *     "ACTIVE, INACTIVE, PENDING, SUSPENDED"
     * );
     * }</pre>
     *
     * @param responseCode  the application-specific error code for this validation failure,
     *                      typically configured in the {@link EnumValidator} annotation
     * @param allowedValues a string representation of all valid enum constants,
     *                      usually generated by {@code TypeConverter.arrayToString()}
     * @see EnumValidator#responseCode()
     * @see org.dk.TypeConverter#arrayToString(Object[])
     */
    public InvalidEnumException(String responseCode, String allowedValues) {
        super("Invalid enum value: " + responseCode);
        this.responseCode = responseCode;
        this.allowedValues = allowedValues;
    }
}
